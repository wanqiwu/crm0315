package com.atguigu.crm.handler;

import java.text.ParseException;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.util.WebUtils;

import com.atguigu.crm.entity.SalesChance;
import com.atguigu.crm.entity.SalesPlan;
import com.atguigu.crm.entity.User;
import com.atguigu.crm.orm.Page;
import com.atguigu.crm.service.SalesChanceService;
import com.atguigu.crm.service.SalesPlanService;

@RequestMapping(value="/plan")
@Controller
public class SalesPlanHandler {
	
	@Autowired
	private SalesChanceService salesChanceService;
	
	@Autowired
	private SalesPlanService salesPlanService;
	
	@RequestMapping(value="/chance/detail/{chanceId}",method=RequestMethod.GET)
	public String querySales(@PathVariable("chanceId") Integer chanceId){
		
		salesPlanService.querySalesDetail(chanceId);
		
		
		
		return "plan/detail";
	}
	
	
	@RequestMapping(value="/execution/{chanceId}")
	public String toExecutionPage(@PathVariable("chanceId") Integer chanceId){
		
		
		return "plan/execute";
	}
	
	
	/**
	 * 完成计划,开发成功
	 * @param chanceId
	 * @param map
	 * @param attributes
	 * @return
	 */
	//=========================================================杨曦宇=====================
	/**
	 * 执行计划，保存执行效果过后，不能呢个修改
	 * @param salesPlan
	 * @return
	 */
	@RequestMapping("/executePlan")
	@ResponseBody
	public String executePlan(SalesPlan salesPlan){
		int row = salesPlanService.save(salesPlan);
		if(row == 1){
			return salesPlan.getResult();
		}
		return null;
	}
	
	@RequestMapping(value="/execution")
	public String toExecutionPlan(@RequestParam(value="id")Long id,
									Map<String ,Object> map){
		
		SalesChance sc = salesPlanService.getById(id);
		map.put("chance", sc);
		return "plan/execute";
	}
	
	@RequestMapping(value="/add-ajax")
	@ResponseBody
	public SalesPlan addPlan(SalesPlan salesPlan){
		int row = salesPlanService.savePlan(salesPlan);
		if(row == 1){
			return salesPlan;
		}
		return null;
	}
	
	/**
	 * ajax删除Plan
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/delete-ajax")
	@ResponseBody
	public int deletePlan(@RequestParam(value="id",required=true)long id){
		int row = salesPlanService.deletePlan((int)id);
		return row;
	}
	
	/**
	 * Ajax更新plan的todo信息
	 * @param id
	 * @param todo
	 * @return
	 */
	@RequestMapping(value="/update-ajax")
	@ResponseBody
	public int updateTodo(SalesPlan salesPlan){
		int row = salesPlanService.updateTodo(salesPlan);
		return row;
	}
	
	//前往指定计划的页面,根据传递的销售机会ID查询SalesChance对象
		@RequestMapping(value="/make" ,method=RequestMethod.GET)
		public String make(@RequestParam(value="id", required=true)Long id,
										Map<String ,Object> map){
			SalesChance SC = salesPlanService.getById(id);
			
			map.put("chance", SC);
			return "plan/make";
		}
	

	/**
	 * 显示销售计划列表（不带查询条件的分页）
	 * @param request
	 * @param pageNoStr
	 * @param map
	 * @return
	 * @throws ParseException
	 */
	/**
	 * 显示status不等于1的销售机会信息,且指派人为当前登录用户的销售机会信息。
	 * @return
	 */
	@RequestMapping(value="/list" , method=RequestMethod.GET)
	public String showList(@RequestParam(value="pageNo" , required=false)String pageNoStr,
			 				HttpSession session,
			 				Map<String , Object> map){
		
		User user = (User) session.getAttribute("user");
		
		
		int pageNo = 1;
		try{
			pageNo = Integer.parseInt(pageNoStr);
		}catch(Exception e){}
		
		//根据当前登录用户的ID和传入的页码查询
		Page<SalesChance> page = salesPlanService.getPage(pageNo , user.getId());

		
		
		map.put("page", page);
		return "plan/list";
	}

	/**
	 * 遍历集合. 在转为一个查询字符串. 注意: key 前面需要添加 "search_" 前缀
	 * @param params
	 * @return
	 */
	private String parseRequestParams2QueryString(Map<String, Object> params) {

		StringBuilder result = new StringBuilder("");

		for (Map.Entry<String, Object> entry : params.entrySet()) {
			String key = entry.getKey();
			Object val = entry.getValue();

			if (val == null || val.toString().trim().equals("")) {
				continue;
			}

			result.append("search_").append(key).append("=").append(val)
					.append("&");
		}

		if (result.length() > 1) {
			result = result.replace(result.length() - 1, result.length(), "");
		}
		return result.toString();
	}
}
